// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduler/scheduler.proto

package scheduler // import "github.com/oasislabs/ekiden/go/grpc/scheduler"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommitteeNode_Role int32

const (
	CommitteeNode_INVALID       CommitteeNode_Role = 0
	CommitteeNode_WORKER        CommitteeNode_Role = 1
	CommitteeNode_LEADER        CommitteeNode_Role = 2
	CommitteeNode_BACKUP_WORKER CommitteeNode_Role = 3
)

var CommitteeNode_Role_name = map[int32]string{
	0: "INVALID",
	1: "WORKER",
	2: "LEADER",
	3: "BACKUP_WORKER",
}
var CommitteeNode_Role_value = map[string]int32{
	"INVALID":       0,
	"WORKER":        1,
	"LEADER":        2,
	"BACKUP_WORKER": 3,
}

func (x CommitteeNode_Role) String() string {
	return proto.EnumName(CommitteeNode_Role_name, int32(x))
}
func (CommitteeNode_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_bf9e04ccbb34fb36, []int{0, 0}
}

type Committee_Kind int32

const (
	Committee_COMPUTE Committee_Kind = 0
	Committee_STORAGE Committee_Kind = 1
)

var Committee_Kind_name = map[int32]string{
	0: "COMPUTE",
	1: "STORAGE",
}
var Committee_Kind_value = map[string]int32{
	"COMPUTE": 0,
	"STORAGE": 1,
}

func (x Committee_Kind) String() string {
	return proto.EnumName(Committee_Kind_name, int32(x))
}
func (Committee_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_bf9e04ccbb34fb36, []int{1, 0}
}

type CommitteeNode struct {
	PublicKey            []byte             `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Role                 CommitteeNode_Role `protobuf:"varint,2,opt,name=role,proto3,enum=scheduler.CommitteeNode_Role" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CommitteeNode) Reset()         { *m = CommitteeNode{} }
func (m *CommitteeNode) String() string { return proto.CompactTextString(m) }
func (*CommitteeNode) ProtoMessage()    {}
func (*CommitteeNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_bf9e04ccbb34fb36, []int{0}
}
func (m *CommitteeNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitteeNode.Unmarshal(m, b)
}
func (m *CommitteeNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitteeNode.Marshal(b, m, deterministic)
}
func (dst *CommitteeNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitteeNode.Merge(dst, src)
}
func (m *CommitteeNode) XXX_Size() int {
	return xxx_messageInfo_CommitteeNode.Size(m)
}
func (m *CommitteeNode) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitteeNode.DiscardUnknown(m)
}

var xxx_messageInfo_CommitteeNode proto.InternalMessageInfo

func (m *CommitteeNode) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *CommitteeNode) GetRole() CommitteeNode_Role {
	if m != nil {
		return m.Role
	}
	return CommitteeNode_INVALID
}

type Committee struct {
	Kind                 Committee_Kind   `protobuf:"varint,1,opt,name=kind,proto3,enum=scheduler.Committee_Kind" json:"kind,omitempty"`
	Members              []*CommitteeNode `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	RuntimeId            []byte           `protobuf:"bytes,3,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	ValidFor             uint64           `protobuf:"varint,4,opt,name=valid_for,json=validFor,proto3" json:"valid_for,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Committee) Reset()         { *m = Committee{} }
func (m *Committee) String() string { return proto.CompactTextString(m) }
func (*Committee) ProtoMessage()    {}
func (*Committee) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_bf9e04ccbb34fb36, []int{1}
}
func (m *Committee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Committee.Unmarshal(m, b)
}
func (m *Committee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Committee.Marshal(b, m, deterministic)
}
func (dst *Committee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Committee.Merge(dst, src)
}
func (m *Committee) XXX_Size() int {
	return xxx_messageInfo_Committee.Size(m)
}
func (m *Committee) XXX_DiscardUnknown() {
	xxx_messageInfo_Committee.DiscardUnknown(m)
}

var xxx_messageInfo_Committee proto.InternalMessageInfo

func (m *Committee) GetKind() Committee_Kind {
	if m != nil {
		return m.Kind
	}
	return Committee_COMPUTE
}

func (m *Committee) GetMembers() []*CommitteeNode {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Committee) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *Committee) GetValidFor() uint64 {
	if m != nil {
		return m.ValidFor
	}
	return 0
}

type CommitteeRequest struct {
	RuntimeId            []byte   `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitteeRequest) Reset()         { *m = CommitteeRequest{} }
func (m *CommitteeRequest) String() string { return proto.CompactTextString(m) }
func (*CommitteeRequest) ProtoMessage()    {}
func (*CommitteeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_bf9e04ccbb34fb36, []int{2}
}
func (m *CommitteeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitteeRequest.Unmarshal(m, b)
}
func (m *CommitteeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitteeRequest.Marshal(b, m, deterministic)
}
func (dst *CommitteeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitteeRequest.Merge(dst, src)
}
func (m *CommitteeRequest) XXX_Size() int {
	return xxx_messageInfo_CommitteeRequest.Size(m)
}
func (m *CommitteeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitteeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitteeRequest proto.InternalMessageInfo

func (m *CommitteeRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

type CommitteeResponse struct {
	Committee            []*Committee `protobuf:"bytes,1,rep,name=committee,proto3" json:"committee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CommitteeResponse) Reset()         { *m = CommitteeResponse{} }
func (m *CommitteeResponse) String() string { return proto.CompactTextString(m) }
func (*CommitteeResponse) ProtoMessage()    {}
func (*CommitteeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_bf9e04ccbb34fb36, []int{3}
}
func (m *CommitteeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitteeResponse.Unmarshal(m, b)
}
func (m *CommitteeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitteeResponse.Marshal(b, m, deterministic)
}
func (dst *CommitteeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitteeResponse.Merge(dst, src)
}
func (m *CommitteeResponse) XXX_Size() int {
	return xxx_messageInfo_CommitteeResponse.Size(m)
}
func (m *CommitteeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitteeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitteeResponse proto.InternalMessageInfo

func (m *CommitteeResponse) GetCommittee() []*Committee {
	if m != nil {
		return m.Committee
	}
	return nil
}

type WatchRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchRequest) Reset()         { *m = WatchRequest{} }
func (m *WatchRequest) String() string { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()    {}
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_bf9e04ccbb34fb36, []int{4}
}
func (m *WatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchRequest.Unmarshal(m, b)
}
func (m *WatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchRequest.Marshal(b, m, deterministic)
}
func (dst *WatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRequest.Merge(dst, src)
}
func (m *WatchRequest) XXX_Size() int {
	return xxx_messageInfo_WatchRequest.Size(m)
}
func (m *WatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRequest proto.InternalMessageInfo

type WatchResponse struct {
	Committee            *Committee `protobuf:"bytes,1,opt,name=committee,proto3" json:"committee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *WatchResponse) Reset()         { *m = WatchResponse{} }
func (m *WatchResponse) String() string { return proto.CompactTextString(m) }
func (*WatchResponse) ProtoMessage()    {}
func (*WatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_bf9e04ccbb34fb36, []int{5}
}
func (m *WatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchResponse.Unmarshal(m, b)
}
func (m *WatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchResponse.Marshal(b, m, deterministic)
}
func (dst *WatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchResponse.Merge(dst, src)
}
func (m *WatchResponse) XXX_Size() int {
	return xxx_messageInfo_WatchResponse.Size(m)
}
func (m *WatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchResponse proto.InternalMessageInfo

func (m *WatchResponse) GetCommittee() *Committee {
	if m != nil {
		return m.Committee
	}
	return nil
}

func init() {
	proto.RegisterType((*CommitteeNode)(nil), "scheduler.CommitteeNode")
	proto.RegisterType((*Committee)(nil), "scheduler.Committee")
	proto.RegisterType((*CommitteeRequest)(nil), "scheduler.CommitteeRequest")
	proto.RegisterType((*CommitteeResponse)(nil), "scheduler.CommitteeResponse")
	proto.RegisterType((*WatchRequest)(nil), "scheduler.WatchRequest")
	proto.RegisterType((*WatchResponse)(nil), "scheduler.WatchResponse")
	proto.RegisterEnum("scheduler.CommitteeNode_Role", CommitteeNode_Role_name, CommitteeNode_Role_value)
	proto.RegisterEnum("scheduler.Committee_Kind", Committee_Kind_name, Committee_Kind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	GetCommittees(ctx context.Context, in *CommitteeRequest, opts ...grpc.CallOption) (*CommitteeResponse, error)
	WatchCommittees(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Scheduler_WatchCommitteesClient, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) GetCommittees(ctx context.Context, in *CommitteeRequest, opts ...grpc.CallOption) (*CommitteeResponse, error) {
	out := new(CommitteeResponse)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/GetCommittees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) WatchCommittees(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Scheduler_WatchCommitteesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scheduler_serviceDesc.Streams[0], "/scheduler.Scheduler/WatchCommittees", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerWatchCommitteesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_WatchCommitteesClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type schedulerWatchCommitteesClient struct {
	grpc.ClientStream
}

func (x *schedulerWatchCommitteesClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	GetCommittees(context.Context, *CommitteeRequest) (*CommitteeResponse, error)
	WatchCommittees(*WatchRequest, Scheduler_WatchCommitteesServer) error
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_GetCommittees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetCommittees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/GetCommittees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetCommittees(ctx, req.(*CommitteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_WatchCommittees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).WatchCommittees(m, &schedulerWatchCommitteesServer{stream})
}

type Scheduler_WatchCommitteesServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type schedulerWatchCommitteesServer struct {
	grpc.ServerStream
}

func (x *schedulerWatchCommitteesServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommittees",
			Handler:    _Scheduler_GetCommittees_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchCommittees",
			Handler:       _Scheduler_WatchCommittees_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scheduler/scheduler.proto",
}

func init() {
	proto.RegisterFile("scheduler/scheduler.proto", fileDescriptor_scheduler_bf9e04ccbb34fb36)
}

var fileDescriptor_scheduler_bf9e04ccbb34fb36 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xed, 0x26, 0x56, 0x8b, 0xa7, 0x4d, 0x70, 0x57, 0x48, 0xb8, 0x2d, 0x95, 0xac, 0x3d, 0xe5,
	0x52, 0x9b, 0x9a, 0x3b, 0x52, 0x9a, 0x9a, 0x10, 0x25, 0x34, 0xd5, 0xb6, 0xa5, 0x12, 0x97, 0x28,
	0xb6, 0x87, 0x64, 0x15, 0xdb, 0x1b, 0xbc, 0x36, 0x52, 0x3f, 0x07, 0xf1, 0x3b, 0x7c, 0x14, 0xb2,
	0x93, 0x38, 0xa1, 0x18, 0x89, 0xdb, 0xce, 0x9b, 0x37, 0xef, 0xbd, 0x59, 0x69, 0xe0, 0x44, 0x05,
	0x73, 0x0c, 0xf3, 0x08, 0x53, 0xa7, 0x7a, 0xd9, 0xcb, 0x54, 0x66, 0x92, 0xea, 0x15, 0xc0, 0x7e,
	0x10, 0x68, 0xf5, 0x64, 0x1c, 0x8b, 0x2c, 0x43, 0xbc, 0x91, 0x21, 0xd2, 0x73, 0x80, 0x65, 0xee,
	0x47, 0x22, 0x98, 0x2c, 0xf0, 0xc9, 0x24, 0x16, 0xe9, 0x1c, 0x71, 0x7d, 0x85, 0x0c, 0xf1, 0x89,
	0x5e, 0x82, 0x96, 0xca, 0x08, 0xcd, 0x86, 0x45, 0x3a, 0x6d, 0xf7, 0xdc, 0xde, 0x6a, 0xff, 0x21,
	0x63, 0x73, 0x19, 0x21, 0x2f, 0xa9, 0xec, 0x3d, 0x68, 0x45, 0x45, 0x0f, 0xe1, 0x60, 0x70, 0xf3,
	0xb9, 0x3b, 0x1a, 0x5c, 0x1b, 0x7b, 0x14, 0x60, 0xff, 0x71, 0xcc, 0x87, 0x1e, 0x37, 0x48, 0xf1,
	0x1e, 0x79, 0xdd, 0x6b, 0x8f, 0x1b, 0x0d, 0x7a, 0x0c, 0xad, 0xab, 0x6e, 0x6f, 0xf8, 0x70, 0x3b,
	0x59, 0xb7, 0x9b, 0xec, 0x17, 0x01, 0xbd, 0x12, 0xa7, 0x17, 0xa0, 0x2d, 0x44, 0x12, 0x96, 0xc9,
	0xda, 0xee, 0x49, 0x5d, 0x00, 0x7b, 0x28, 0x92, 0x90, 0x97, 0x34, 0xea, 0xc2, 0x41, 0x8c, 0xb1,
	0x8f, 0xa9, 0x32, 0x1b, 0x56, 0xb3, 0x73, 0xe8, 0x9a, 0xff, 0x8a, 0xcc, 0x37, 0xc4, 0xe2, 0x0b,
	0xd2, 0x3c, 0xc9, 0x44, 0x8c, 0x13, 0x11, 0x9a, 0xcd, 0xd5, 0x17, 0xac, 0x91, 0x41, 0x48, 0xcf,
	0x40, 0xff, 0x3e, 0x8d, 0x44, 0x38, 0xf9, 0x2a, 0x53, 0x53, 0xb3, 0x48, 0x47, 0xe3, 0x2f, 0x4a,
	0xe0, 0x83, 0x4c, 0x99, 0x05, 0x5a, 0xe1, 0x5e, 0x2c, 0xdb, 0x1b, 0x7f, 0xba, 0x7d, 0xb8, 0xf7,
	0x8c, 0xbd, 0xa2, 0xb8, 0xbb, 0x1f, 0xf3, 0x6e, 0xdf, 0x33, 0x08, 0xbb, 0x04, 0xa3, 0xf2, 0xe5,
	0xf8, 0x2d, 0x47, 0x95, 0x3d, 0x73, 0x24, 0xcf, 0x1c, 0x59, 0x1f, 0x8e, 0x77, 0x46, 0xd4, 0x52,
	0x26, 0x0a, 0xa9, 0x0b, 0x7a, 0xb0, 0x01, 0x4d, 0x52, 0xee, 0xf6, 0xaa, 0x6e, 0x37, 0xbe, 0xa5,
	0xb1, 0x36, 0x1c, 0x3d, 0x4e, 0xb3, 0x60, 0xbe, 0xf6, 0x65, 0x3d, 0x68, 0xad, 0xeb, 0x7a, 0x51,
	0xf2, 0x1f, 0xa2, 0xee, 0x4f, 0x02, 0xfa, 0xdd, 0x86, 0x42, 0x47, 0xd0, 0xea, 0x63, 0x56, 0x11,
	0x15, 0x3d, 0xab, 0x9d, 0x5f, 0x05, 0x38, 0x7d, 0x53, 0xdf, 0x5c, 0xa5, 0x61, 0x7b, 0xf4, 0x23,
	0xbc, 0x2c, 0x03, 0xee, 0xe8, 0xbd, 0xde, 0x19, 0xd9, 0x5d, 0xe6, 0xd4, 0xfc, 0xbb, 0xb1, 0xd1,
	0x79, 0x4b, 0xae, 0x9c, 0x2f, 0x17, 0x33, 0x91, 0xcd, 0x73, 0xdf, 0x0e, 0x64, 0xec, 0xc8, 0xa9,
	0x12, 0x2a, 0x9a, 0xfa, 0xca, 0xc1, 0x85, 0x08, 0x31, 0x71, 0x66, 0xd2, 0x99, 0xa5, 0xcb, 0x60,
	0x7b, 0x2b, 0xfe, 0x7e, 0x79, 0x2c, 0xef, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x18, 0x14, 0x45,
	0xf6, 0x49, 0x03, 0x00, 0x00,
}
