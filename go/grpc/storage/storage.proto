syntax = "proto3";

package storage;
option go_package = "github.com/oasislabs/ekiden/go/grpc/storage";

service Storage {
    // CAS
    rpc Get(GetRequest) returns (GetResponse) {}
    rpc GetBatch(GetBatchRequest) returns (GetBatchResponse) {}
    rpc GetReceipt(GetReceiptRequest) returns (GetReceiptResponse) {}
    rpc Insert(InsertRequest) returns (InsertResponse) {}
    rpc InsertBatch(InsertBatchRequest) returns (InsertBatchResponse) {}
    rpc GetKeys(GetKeysRequest) returns (stream GetKeysResponse) {}
    // MKVS
    rpc Apply(ApplyRequest) returns (ApplyResponse) {}
    rpc ApplyBatch(ApplyBatchRequest) returns (ApplyBatchResponse) {}
    rpc GetSubtree(GetSubtreeRequest) returns (GetSubtreeResponse) {}
    rpc GetPath(GetPathRequest) returns (GetPathResponse) {}
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse) {}
    rpc GetValue(GetValueRequest) returns (GetValueResponse) {}
}

message GetRequest {
    bytes id = 1;
}

message GetResponse {
    bytes data = 1;
}

message GetBatchRequest {
    repeated bytes ids = 1;
}

message GetBatchResponse {
    repeated bytes data = 1;
}

message GetReceiptRequest {
    repeated bytes ids = 1;
}

message GetReceiptResponse {
    bytes data = 1;
}

message InsertRequest {
    bytes data = 1;
    uint64 expiry = 2;
}

message InsertResponse {
}

message InsertBatchRequest {
    repeated InsertRequest items = 1;
}

message InsertBatchResponse {
}

message GetKeysRequest {
}

message GetKeysResponse {
    bytes key = 1;
    uint64 expiry = 2;
}

message LogEntry {
    bytes key = 1;
    bytes value = 2;
}

message ApplyRequest {
    bytes root = 1;
    bytes expected_new_root = 2;
    repeated LogEntry log = 3;
}

message ApplyResponse {
    bytes receipt = 1; // MKVSReceipt, serialized to CBOR
}

message ApplyOp {
    bytes root = 1;
    bytes expected_new_root = 2;
    repeated LogEntry log = 3;
}

message ApplyBatchRequest {
    repeated ApplyOp ops = 1;
}

message ApplyBatchResponse {
    bytes receipt = 1; // MKVSReceipt, serialized to CBOR
}

message NodeID {
    bytes path = 1;
    uint32 depth = 2;  // MKVSDepthType
}

message GetSubtreeRequest {
    bytes root = 1;
    NodeID id = 2;
    uint32 max_depth = 3;  // MKVSDepthType
}

message GetSubtreeResponse {
    bytes subtree = 1;  // serialized to binary
}

message GetPathRequest {
    bytes root = 1;
    bytes key = 2;
    uint32 start_depth = 3;  // MKVSDepthType
}

message GetPathResponse {
    bytes subtree = 1;  // serialized to binary
}

message GetNodeRequest {
    bytes root = 1;
    NodeID id = 2;
}

message GetNodeResponse {
    bytes node = 1;  // serialized to binary
}

message GetValueRequest {
    bytes root = 1;
    bytes id = 2;
}

message GetValueResponse {
    bytes value = 1;
}
