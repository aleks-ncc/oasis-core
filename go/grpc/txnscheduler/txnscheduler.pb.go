// Code generated by protoc-gen-go. DO NOT EDIT.
// source: txnscheduler/txnscheduler.proto

package txnscheduler // import "github.com/oasislabs/ekiden/go/grpc/txnscheduler"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubmitTxRequest struct {
	// Runtime identifier.
	RuntimeId []byte `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// Encoded transaction.
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitTxRequest) Reset()         { *m = SubmitTxRequest{} }
func (m *SubmitTxRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitTxRequest) ProtoMessage()    {}
func (*SubmitTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_txnscheduler_52373e3785113982, []int{0}
}
func (m *SubmitTxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTxRequest.Unmarshal(m, b)
}
func (m *SubmitTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTxRequest.Marshal(b, m, deterministic)
}
func (dst *SubmitTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTxRequest.Merge(dst, src)
}
func (m *SubmitTxRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitTxRequest.Size(m)
}
func (m *SubmitTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTxRequest proto.InternalMessageInfo

func (m *SubmitTxRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *SubmitTxRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubmitTxResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitTxResponse) Reset()         { *m = SubmitTxResponse{} }
func (m *SubmitTxResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitTxResponse) ProtoMessage()    {}
func (*SubmitTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_txnscheduler_52373e3785113982, []int{1}
}
func (m *SubmitTxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTxResponse.Unmarshal(m, b)
}
func (m *SubmitTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTxResponse.Marshal(b, m, deterministic)
}
func (dst *SubmitTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTxResponse.Merge(dst, src)
}
func (m *SubmitTxResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitTxResponse.Size(m)
}
func (m *SubmitTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTxResponse proto.InternalMessageInfo

type IsTransactionQueuedRequest struct {
	// Runtime identifier.
	RuntimeId []byte `protobuf:"bytes,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// Hash of encoded transaction.
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsTransactionQueuedRequest) Reset()         { *m = IsTransactionQueuedRequest{} }
func (m *IsTransactionQueuedRequest) String() string { return proto.CompactTextString(m) }
func (*IsTransactionQueuedRequest) ProtoMessage()    {}
func (*IsTransactionQueuedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_txnscheduler_52373e3785113982, []int{2}
}
func (m *IsTransactionQueuedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsTransactionQueuedRequest.Unmarshal(m, b)
}
func (m *IsTransactionQueuedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsTransactionQueuedRequest.Marshal(b, m, deterministic)
}
func (dst *IsTransactionQueuedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTransactionQueuedRequest.Merge(dst, src)
}
func (m *IsTransactionQueuedRequest) XXX_Size() int {
	return xxx_messageInfo_IsTransactionQueuedRequest.Size(m)
}
func (m *IsTransactionQueuedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTransactionQueuedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsTransactionQueuedRequest proto.InternalMessageInfo

func (m *IsTransactionQueuedRequest) GetRuntimeId() []byte {
	if m != nil {
		return m.RuntimeId
	}
	return nil
}

func (m *IsTransactionQueuedRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type IsTransactionQueuedResponse struct {
	// Whether the transaction is queued.
	IsQueued             bool     `protobuf:"varint,1,opt,name=is_queued,json=isQueued,proto3" json:"is_queued,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsTransactionQueuedResponse) Reset()         { *m = IsTransactionQueuedResponse{} }
func (m *IsTransactionQueuedResponse) String() string { return proto.CompactTextString(m) }
func (*IsTransactionQueuedResponse) ProtoMessage()    {}
func (*IsTransactionQueuedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_txnscheduler_52373e3785113982, []int{3}
}
func (m *IsTransactionQueuedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsTransactionQueuedResponse.Unmarshal(m, b)
}
func (m *IsTransactionQueuedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsTransactionQueuedResponse.Marshal(b, m, deterministic)
}
func (dst *IsTransactionQueuedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTransactionQueuedResponse.Merge(dst, src)
}
func (m *IsTransactionQueuedResponse) XXX_Size() int {
	return xxx_messageInfo_IsTransactionQueuedResponse.Size(m)
}
func (m *IsTransactionQueuedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTransactionQueuedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsTransactionQueuedResponse proto.InternalMessageInfo

func (m *IsTransactionQueuedResponse) GetIsQueued() bool {
	if m != nil {
		return m.IsQueued
	}
	return false
}

func init() {
	proto.RegisterType((*SubmitTxRequest)(nil), "txnscheduler.SubmitTxRequest")
	proto.RegisterType((*SubmitTxResponse)(nil), "txnscheduler.SubmitTxResponse")
	proto.RegisterType((*IsTransactionQueuedRequest)(nil), "txnscheduler.IsTransactionQueuedRequest")
	proto.RegisterType((*IsTransactionQueuedResponse)(nil), "txnscheduler.IsTransactionQueuedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactionSchedulerClient is the client API for TransactionScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionSchedulerClient interface {
	// SubmitTx submits a new transaction to the transaction scheduler.
	SubmitTx(ctx context.Context, in *SubmitTxRequest, opts ...grpc.CallOption) (*SubmitTxResponse, error)
	// IsTransactionQueued checks if the given transaction is present in the
	// transaction scheduler queue and is waiting to be dispatched to a
	// compute committee.
	IsTransactionQueued(ctx context.Context, in *IsTransactionQueuedRequest, opts ...grpc.CallOption) (*IsTransactionQueuedResponse, error)
}

type transactionSchedulerClient struct {
	cc *grpc.ClientConn
}

func NewTransactionSchedulerClient(cc *grpc.ClientConn) TransactionSchedulerClient {
	return &transactionSchedulerClient{cc}
}

func (c *transactionSchedulerClient) SubmitTx(ctx context.Context, in *SubmitTxRequest, opts ...grpc.CallOption) (*SubmitTxResponse, error) {
	out := new(SubmitTxResponse)
	err := c.cc.Invoke(ctx, "/txnscheduler.TransactionScheduler/SubmitTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionSchedulerClient) IsTransactionQueued(ctx context.Context, in *IsTransactionQueuedRequest, opts ...grpc.CallOption) (*IsTransactionQueuedResponse, error) {
	out := new(IsTransactionQueuedResponse)
	err := c.cc.Invoke(ctx, "/txnscheduler.TransactionScheduler/IsTransactionQueued", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionSchedulerServer is the server API for TransactionScheduler service.
type TransactionSchedulerServer interface {
	// SubmitTx submits a new transaction to the transaction scheduler.
	SubmitTx(context.Context, *SubmitTxRequest) (*SubmitTxResponse, error)
	// IsTransactionQueued checks if the given transaction is present in the
	// transaction scheduler queue and is waiting to be dispatched to a
	// compute committee.
	IsTransactionQueued(context.Context, *IsTransactionQueuedRequest) (*IsTransactionQueuedResponse, error)
}

func RegisterTransactionSchedulerServer(s *grpc.Server, srv TransactionSchedulerServer) {
	s.RegisterService(&_TransactionScheduler_serviceDesc, srv)
}

func _TransactionScheduler_SubmitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionSchedulerServer).SubmitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txnscheduler.TransactionScheduler/SubmitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionSchedulerServer).SubmitTx(ctx, req.(*SubmitTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionScheduler_IsTransactionQueued_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTransactionQueuedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionSchedulerServer).IsTransactionQueued(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txnscheduler.TransactionScheduler/IsTransactionQueued",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionSchedulerServer).IsTransactionQueued(ctx, req.(*IsTransactionQueuedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionScheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "txnscheduler.TransactionScheduler",
	HandlerType: (*TransactionSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTx",
			Handler:    _TransactionScheduler_SubmitTx_Handler,
		},
		{
			MethodName: "IsTransactionQueued",
			Handler:    _TransactionScheduler_IsTransactionQueued_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "txnscheduler/txnscheduler.proto",
}

func init() {
	proto.RegisterFile("txnscheduler/txnscheduler.proto", fileDescriptor_txnscheduler_52373e3785113982)
}

var fileDescriptor_txnscheduler_52373e3785113982 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x35, 0x22, 0x92, 0x0e, 0x05, 0x65, 0xf5, 0x50, 0x52, 0xaa, 0x92, 0x53, 0xbd, 0x24, 0x52,
	0x6f, 0x1e, 0xc5, 0x4b, 0xf1, 0x20, 0xa6, 0x3d, 0x79, 0x29, 0x9b, 0xec, 0x90, 0x2c, 0x26, 0xbb,
	0x69, 0x66, 0x17, 0xfa, 0x9b, 0xfe, 0x91, 0xb8, 0x6d, 0x30, 0x29, 0x2d, 0xf4, 0x36, 0xf3, 0x66,
	0xe6, 0xbd, 0x99, 0xc7, 0xc0, 0xbd, 0xd9, 0x28, 0xca, 0x0a, 0x14, 0xb6, 0xc4, 0x26, 0xee, 0x26,
	0x51, 0xdd, 0x68, 0xa3, 0xd9, 0xb0, 0x8b, 0x85, 0x6f, 0x70, 0xb5, 0xb0, 0x69, 0x25, 0xcd, 0x72,
	0x93, 0xe0, 0xda, 0x22, 0x19, 0x36, 0x01, 0x68, 0xac, 0x32, 0xb2, 0xc2, 0x95, 0x14, 0x23, 0xef,
	0xc1, 0x9b, 0x0e, 0x93, 0xc1, 0x0e, 0x99, 0x0b, 0xc6, 0xe0, 0x42, 0x70, 0xc3, 0x47, 0xe7, 0xae,
	0xe0, 0xe2, 0x90, 0xc1, 0xf5, 0x3f, 0x0b, 0xd5, 0x5a, 0x11, 0x86, 0x1f, 0x10, 0xcc, 0x69, 0xd9,
	0x70, 0x45, 0x3c, 0x33, 0x52, 0xab, 0x4f, 0x8b, 0x16, 0xc5, 0xe9, 0x22, 0x05, 0xa7, 0xa2, 0x15,
	0xf9, 0x8b, 0xc3, 0x17, 0x18, 0x1f, 0x24, 0xdc, 0xea, 0xb1, 0x31, 0x0c, 0x24, 0xad, 0xd6, 0x0e,
	0x74, 0x84, 0x7e, 0xe2, 0x4b, 0xda, 0x36, 0xcd, 0x7e, 0x3c, 0xb8, 0xed, 0x8c, 0x2e, 0xda, 0xfb,
	0xd9, 0x3b, 0xf8, 0xed, 0xe6, 0x6c, 0x12, 0xf5, 0xec, 0xda, 0xf3, 0x25, 0xb8, 0x3b, 0x56, 0xde,
	0x1d, 0x7c, 0xc6, 0x4a, 0xb8, 0x39, 0xb0, 0x21, 0x9b, 0xf6, 0x07, 0x8f, 0xbb, 0x12, 0x3c, 0x9e,
	0xd0, 0xd9, 0xaa, 0xbd, 0xce, 0xbe, 0x9e, 0x72, 0x69, 0x0a, 0x9b, 0x46, 0x99, 0xae, 0x62, 0xcd,
	0x49, 0x52, 0xc9, 0x53, 0x8a, 0xf1, 0x5b, 0x0a, 0x54, 0x71, 0xae, 0xe3, 0xbc, 0xa9, 0xb3, 0xde,
	0x0b, 0xa4, 0x97, 0xee, 0x07, 0x9e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xbf, 0x08, 0x94,
	0x26, 0x02, 0x00, 0x00,
}
